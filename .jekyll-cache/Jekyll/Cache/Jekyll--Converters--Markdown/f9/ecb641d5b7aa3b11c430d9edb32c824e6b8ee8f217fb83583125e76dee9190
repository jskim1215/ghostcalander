I"*D<h2 id="prelude--추세-추종-전략이란">Prelude : 추세 추종 전략이란?</h2>
<p><code class="language-plaintext highlighter-rouge">추세 추종 전략</code>이란 차트 상의 데이터를 가지고 주가의 이동 방향에 대해 판단해 진입하는 트레이딩 방법 중 하나다. 주가가 중장기적인 저항대를 뚫고 올라갈 때 매수에 동참해 추세가 꺾일 때까지 보유하는 중장기적인 트레이딩 전략이다. 이 전략의 핵심은 비쌀 때 사서, 더 비싸지기를 기다리는 것이라고 할 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">추세 추종 전략의 단점</code>은 시장의 $\frac{2}{3}$ 이상은 추세적이지 않다는 것이다. 즉, 이 전략의 핵심은 오르면 떨어지고, 떨어지면 다시 반등하는 횡보장의 리스크를 어떻게 처리해주냐에 달려있다. 따라서, 장기 추세 추종 전략의 경우, 한 번 트레이딩에서 큰 수익을 얻어 전체적인 수익을 챙기는 방향으로 전략을 구사해야한다.<br />
(일반적으로 <code class="language-plaintext highlighter-rouge">추세 추종 전략</code>의 승률은 <code class="language-plaintext highlighter-rouge">30%</code>대로 상당히 낮은 편이다)</p>

<h2 id="1-돈키언-채널">1. 돈키언 채널</h2>
<h3 id="정의">정의</h3>
<p>일정 기간 N 동안의 고점의 최대값을 상선, 저점의 최소값을 하선으로 그린 채널 지표다. 채널이란, 특정 중심선을 기준으로 상하단에 일정한 폭의 범위를 설정해놓은 구간을 말한다.</p>

<h3 id="코드">코드</h3>
<p><strong>기본 구조</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">시간 t의 돈키언 채널값</code> : 시간 t에서 <code class="language-plaintext highlighter-rouge">t-N</code>에서 <code class="language-plaintext highlighter-rouge">t-1</code>까지의 데이터 사용</li>
</ul>

<h4 id="a-반복문을-활용한-함수-정의">a. 반복문을 활용한 함수 정의</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">donchian_max</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>   <span class="c1"># t 는 시점 (건들지 말 것!)
</span>  <span class="nb">max</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="p">),</span><span class="mi">2</span><span class="p">]</span>      <span class="c1"># N은 기간 (N을 조정할 것!)
</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="o">+</span><span class="n">i</span><span class="p">),</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nb">max</span><span class="p">:</span>
          <span class="nb">max</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span> <span class="o">-</span> <span class="n">N</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="mi">2</span><span class="p">]</span>
  <span class="k">return</span> <span class="nb">max</span>

<span class="k">def</span> <span class="nf">donchian_min</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
  <span class="nb">min</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="p">),</span><span class="mi">3</span><span class="p">]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="o">+</span><span class="n">i</span><span class="p">),</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nb">min</span><span class="p">:</span>
        <span class="nb">min</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="o">+</span><span class="n">i</span><span class="p">),</span><span class="mi">3</span><span class="p">]</span>
  <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>
<h4 id="b-list에-담아서-max--min-함수-처리하기">b. List에 담아서 Max / min 함수 처리하기</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">donchian_max</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>   <span class="c1"># t 는 시점 (건들지 말 것!)
</span>  <span class="n">box</span><span class="o">=</span><span class="p">[]</span>    <span class="c1"># N은 기간 (N을 조정할 것!)
</span>  <span class="n">max_value</span><span class="o">=</span><span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
    <span class="n">box</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="o">+</span><span class="n">i</span><span class="p">),</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># 데이터 프레임 카운팅 주의
</span>  <span class="n">max_value</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">box</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">max_value</span>

<span class="k">def</span> <span class="nf">donchian_min</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
  <span class="n">box</span><span class="o">=</span><span class="p">[]</span>
  <span class="n">min_value</span><span class="o">=</span><span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">N</span><span class="p">):</span>
      <span class="n">box</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[(</span><span class="n">t</span><span class="o">-</span><span class="n">N</span><span class="o">+</span><span class="n">i</span><span class="p">),</span><span class="mi">3</span><span class="p">])</span> <span class="c1"># 데이터 프레임 카운팅 주의
</span>  <span class="n">min_value</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="n">box</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">min_value</span>
</code></pre></div></div>

<h3 id="연산-속도-비교-결과">연산 속도 비교 결과</h3>

<p><code class="language-plaintext highlighter-rouge">Bitcoin 2월 1분봉</code> 데이터를 가지고 10회 연산 평균값을 비교했을 때 <code class="language-plaintext highlighter-rouge">방법 b</code>의 함수가 속도가 더 빠르므로 사용하기로 결정했다.</p>
<ul>
  <li>a : 21.84초 / 1회</li>
  <li>b : 18.22초 / 1회</li>
</ul>

<h2 id="2-돈키언-채널-돌파">2. 돈키언 채널 돌파</h2>
<h3 id="정의-1">정의</h3>
<p><code class="language-plaintext highlighter-rouge">돈키언 채널 돌파</code>는 특정 기간의 최고가를 갱신했다는 점이 상승 추세를 반영해준다는 개념에서 시작한다. 실 적용에 있어 매수 포지션만 가능하므로 상단 돌파 추세와 관련된 필터를 적용하는 경우가 많다. 대표적으로 이동평균선을 활용한 추세 포트폴리오 필터가 사용된다.</p>

<p>일반적으로 20일선을 기준으로 상단 돌파시 매수, 하단 돌파시 매도를 하는 원칙이다. 하지만 거래 대상이 <code class="language-plaintext highlighter-rouge">암호화폐 1분봉</code>을 기준으로 하고 있으므로 시간 간격을 여러 수치를 대입해보면서 해석을 진행해보려고 한다. 추가로 일정 시간 간격 동안 상선이 같은 값을 유지하고 있는 조건을 추가하려고 한다.</p>

<h3 id="코드-1">코드</h3>
<p><strong>기본 구조</strong></p>
<ul>
  <li>60분 이상 상선 유지</li>
  <li>60분, 240분 정배열
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 카운팅 쉽게 하기 위해 앞뒤 각각 100개 잘라내버리기
</span>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">num_index</span><span class="o">-</span><span class="mi">100</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span><span class="o">&gt;</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="ow">and</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span><span class="o">&gt;</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span> <span class="ow">and</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span><span class="o">&gt;</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">]:</span>
          <span class="k">if</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span><span class="o">&lt;</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">4</span><span class="p">]:</span>
              <span class="n">target_value</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
              <span class="n">target_percent_list</span><span class="o">=</span><span class="p">[]</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="k">pass</span>
      <span class="k">else</span><span class="p">:</span>
          <span class="k">pass</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="결과값-그래프">결과값 (그래프)</h3>
<p>아직 <code class="language-plaintext highlighter-rouge">Valuation</code>에 대한 이해와 코드 공부가 부족하여 <code class="language-plaintext highlighter-rouge">Target</code> 가격에 대한 <code class="language-plaintext highlighter-rouge">앞뒤 60분</code>에 대한 움직임을 그래프화해서 표현해보려고 했다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">31</span><span class="p">):</span>
                    <span class="n">target_percent_value</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">60</span><span class="o">+</span><span class="mi">4</span><span class="o">*</span><span class="n">k</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span><span class="o">/</span><span class="n">target_value</span>
                    <span class="n">target_percent_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">target_percent_value</span><span class="p">)</span>
                <span class="n">new_dict</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span><span class="o">=</span><span class="n">target_percent_list</span>
</code></pre></div></div>

<h4 id="시가총액-상위-중-5개">시가총액 상위 중 5개</h4>
<ol>
  <li>Bitcoin
<img src="https://user-images.githubusercontent.com/80079215/111861141-74552d80-898f-11eb-8ba4-123941b39639.png" alt="bitcoin_feb_ma%Donchian" /></li>
  <li>
    <p>ChainLink
<img src="https://user-images.githubusercontent.com/80079215/111861159-8d5dde80-898f-11eb-8821-da5a0ddadef2.png" alt="chainlink_feb_ma%Donchian" /></p>
  </li>
  <li>Litecoin
<img src="https://user-images.githubusercontent.com/80079215/111861164-92bb2900-898f-11eb-9520-7bf07d0f7811.png" alt="litecoin_feb_ma%Donchian" /></li>
  <li>Ethereum
<img src="https://user-images.githubusercontent.com/80079215/111861181-ac5c7080-898f-11eb-9b78-3367c73a1974.png" alt="Ethereum_feb_ma%Donchian" /></li>
  <li>Polkadot
  <img src="https://user-images.githubusercontent.com/80079215/111861177-a5356280-898f-11eb-8b9a-09ef6cc17643.png" alt="polkadot_feb_ma%Donchian" /></li>
</ol>

<h4 id="시가총액-하위-중-3개">시가총액 하위 중 3개</h4>
<ol>
  <li>
    <p>Chiliz
<img src="https://user-images.githubusercontent.com/80079215/111861186-b1b9bb00-898f-11eb-959e-1f54059d7959.png" alt="chiliz_feb_ma%Donchian" /></p>
  </li>
  <li>Refereum
<img src="https://user-images.githubusercontent.com/80079215/111861191-bda57d00-898f-11eb-87ff-7afa5e26084b.png" alt="Refereum_feb_ma%Donchian" /></li>
  <li>ThetaFuel
<img src="https://user-images.githubusercontent.com/80079215/111861189-b7170580-898f-11eb-84aa-0878e8a228bd.png" alt="ThetaFuel_feb_ma%Donchian" /></li>
</ol>

<h3 id="피드백">피드백</h3>
<p>시가총액이 높은 암호화폐 5종과 시가총액이 낮은 3종을 비교해본 결과 유의미한 결과값을 보이지 않아서 고민해봐야할 것 같다. 단기 추세를 나타내주기에는 돈키언 채널 자체가 어려움이 있지 않나 채널의 성격에 대해 다시 한 번 생각해봐야겠다.</p>

<p>물론 <code class="language-plaintext highlighter-rouge">Chilliz</code>같은 케이스에서 유의미한 결과를 보여줬다. 그래서 펌핑이 나오는 순간을 캐치할 수 있는 알고리즘에 대해 공부를 해봐야할 것 같다.</p>

<p>일반적으로 장기적 추세에 사용되는 <code class="language-plaintext highlighter-rouge">돈키언 채널</code>과 관련해서 시가총액이 높은 암호화폐에 대해 일봉으로 다시 한 번 비교 분석해봐야겠다.</p>
:ET